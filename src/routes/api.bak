import 'dotenv/config'
import express from 'express';
//import { findSimilarDocuments, addDocument } from '../embedder.js';

// import { getStatus, getDocument, findDocuments, countDocuments } from '../mariadbHelper.js'
import { fsDocumentsV2 as fsDocuments, countDocuments, findDocuments, getStatus, getDocument } from '../util/redisHelper.js'

const router = express.Router();

/*
   Vector Semantic Search (MariaDB)
*/
// POST /api/v1/search
router.post('/search', async (req, res) => {
  const { query } = req.body;
  //const results = await findSimilarDocuments(query, process.env.MAX_FIND_RETURN)  
  const results = await fsDocuments("fts:chinese:tokens:", "textChi", "韓非子", 0, 10, "id", "textChi") 

  res.status(200).json(results)
});

// POST /api/v1/add
router.post('/add', async (req, res) => {
  const { textChi } = req.body;

  if (!textChi || textChi.trim() === '') {
    return res.json({ success: false, message: '❌ 請輸入有效內容。' });
  }

  const created = await addDocument(textChi)
  switch (created) {
    case 1: 
        res.status(201).json({ success: true, message:'✅ 新增成功' });
        break;        
    case 2:
        res.status(200).json({ success: true, message:'❌ 重複內容' });
        break;
    default: 
        res.status(500).json({ success: true, message:'❌ 伺服器錯誤' });
  }  
});

// GET /api/v1/stats
router.get('/stats', async (req, res) => {
  res.status(200).json(await getStatus())
});

// GET /api/v1/details?id=xxx
router.get('/details', async (req, res) => {
  const id = parseInt(req.query.id, 10);

  res.status(200).json(await getDocument(id))
});

/*
   Fulltext Search (MariaDB)
*/
// POST /api/v1/ftsearch
router.post('/ftsearch', async (req, res) => {
  const { query, mode, expand } = req.body;
  const results = await findDocuments(query, mode, expand, process.env.MAX_FIND_RETURN)
  
  res.status(200).json(results)
});

// GET /api/v1/ftcheck
router.get('/ftcheck', async (req, res) => {  
  const { query, mode, expand } = req.query
  const count = await countDocuments(query, mode, expand)

  res.status(200).json({ success: true, count })
});

// /*
//    Fulltext Search (Redis)
// */
// // POST /api/v1/ftsredis
// router.post('/ftsredis', async (req, res) => {  
//   const { query } = req.body;
//   const results = await findDocumentsRedis(query, 0, process.env.MAX_FIND_RETURN)
  
//   res.status(200).json(results)
// })

// // GET /api/v1/ftcheckredis
// router.get('/ftcheckredis', async (req, res) => {  
//   const { query } = req.query
//   const count = await countDocumentsRedis(query)
  
//   res.status(200).json({ success: true, count })
// })

// // GET /api/v1/statsredis
// router.get('/statsredis', async (req, res) => {
//   res.status(200).json(await getStatusRedis())
// });

// // GET /api/v1/detailsredis?id=xxx
// router.get('/detailsredis', async (req, res) => {
//   const id = parseInt(req.query.id, 10);

//   res.status(200).json(await getDocumentRedis(id))
// });

export default router;
